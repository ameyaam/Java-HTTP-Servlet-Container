package edu.upenn.cis.cis455.webserver;

import java.io.*;

import javax.servlet.*;
import javax.servlet.http.*;

import java.net.*;
import java.util.*;

interface shutdownThreads {
	void stopThreads();
}

public class HttpServer
	{
		static ThreadPool threadPool;
		static boolean shutdownFlag = false;
		public static void main(String[] args)
		{
			try{
				threadPool = new ThreadPool(10,10);
				
				ServerSocket Server = new ServerSocket (5000, 10, InetAddress.getByName("127.0.0.1"));
				System.out.println ("TCPServer Waiting for client on port 5000");
	
				while(true) {	
					Socket connected = Server.accept();

					BufferedReader checkForShutdown = new BufferedReader(new InputStreamReader (connected.getInputStream()));

					String requestString = checkForShutdown.readLine();
					StringTokenizer tokenizer = new StringTokenizer(requestString);
					
					String httpMethod = tokenizer.nextToken();
					System.out.println("from daemon " + httpMethod);
					String requestPath = tokenizer.nextToken();
					System.out.println("from daemon " + requestPath);
					if(requestPath.endsWith("shutdown"))
					{
						System.out.println("Stopping threads and shutting down server");
						threadPool.stop();
						System.exit(0);
					}
					String httpVersion = tokenizer.nextToken();
					
					HttpRequestHandler handler = new HttpRequestHandler(connected, checkForShutdown, httpMethod, httpVersion, requestPath);
					try {
						
						threadPool.execute(handler);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			} catch(IOException e){
				e.printStackTrace();
			}
		}
		
		static void shutdownThreads()
		{	
			threadPool.stop();
			return;
		}
		
		 static class HttpRequestHandler extends Thread {
			Socket connectedClient;
			String httpVersion;
			String httpMethod;
			BufferedReader inFromClient;
			String RequestPath;
			private HttpRequestHandler(Socket s, BufferedReader in, String method, String version , String reqpath){
				this.connectedClient = s;
				this.httpVersion = version;
				this.httpMethod = method;
				this.inFromClient = in;
				this.RequestPath = reqpath;
			}
			
			@Override
			public void run()
			{
				try {
					/*TODO: Change this path to cmd line argument*/
					System.out.println("servicing request");
					int port = 5000;
					String rootPath = "/home/cis455/Desktop"; 
					String htmlStart = "<html>" +
							"<title>HTTP Multithreaded server </title>" +
							"<body><h1>CIS 455/555 Assignment 1</h1><br>";
					String htmlEnd = "</body>" +
							"</html>";
					String responseString = null;
					String statusLine = null;
					String contentTypeLine = null;
					String serverDetails = "Server: Java HTTPServer" + "\r\n";
					String contentLength = null;
					
					/*BufferedReader inFromClient = new BufferedReader(new InputStreamReader (connectedClient.getInputStream()));*/
					DataOutputStream outToClient = new DataOutputStream(connectedClient.getOutputStream());
					
					System.out.println("From thread " + httpMethod);
					
					if(httpMethod.equals("GET") || httpMethod.equals("HEAD"))
					{
						/*Implement GET Method*/
						String relative_path = RequestPath;
						//relative_path = relative_path.replaceFirst("/", "");
						
						String path = rootPath + relative_path;
						File requiredObject = new File(path);
						System.out.println("relative path is" + relative_path);
						/*TODO: Ensure that rootPath is parent of path*/
						if(!requiredObject.exists())
						{
							/*Send 404*/
							responseString = "<h1>Error: Not Found</h1>";
							contentLength = "Content-Length: " + responseString.length() + "\r\n";
							statusLine = "HTTP/1.1 404 Not Found" + "\r\n";
							contentTypeLine = "Content-Type: text/html" + "\r\n";
							
							outToClient.writeBytes(statusLine);
							outToClient.writeBytes(serverDetails);
							outToClient.writeBytes(contentTypeLine);
							outToClient.writeBytes(contentLength);
							outToClient.writeBytes("Connection: close\r\n");
							outToClient.writeBytes("\r\n");
							if(httpMethod.equals("GET"))
								outToClient.writeBytes(responseString);
							outToClient.close();
							return;	
						}
						/*Ensure required directory is not outside the allowed root*/
						if(!parentCheck(new File(path), new File(rootPath)))
						{
							responseString = "Forbidden";
							contentLength = "Content-Length: " + responseString.length() + "\r\n";
							statusLine = "HTTP/1.1 403 Forbidden" + "\r\n";
							contentTypeLine = "Content-Type: text/html" + "\r\n";
							
							outToClient.writeBytes(statusLine);
							outToClient.writeBytes(serverDetails);
							outToClient.writeBytes(contentTypeLine);
							outToClient.writeBytes(contentLength);
							outToClient.writeBytes("Connection: close\r\n");
							outToClient.writeBytes("\r\n");
							if(httpMethod.equals("GET"))
								outToClient.writeBytes(responseString);
							outToClient.close();
							return;
						}
						if(requiredObject.isDirectory())
						{
							System.out.println("Detected_directory");
							String listOfFiles = "";
							File [] files;
							files = requiredObject.listFiles();
							for(File file :files)
							{
								if (file.isDirectory())
								{
									listOfFiles = listOfFiles + "<a href = \"http://localhost:"
											+ Integer.toString(port) + relative_path  + "/" + file.getName() 
											+ "\">" + file.getName() + "/</a><br>";
								}
								else
								{
									listOfFiles = listOfFiles + "<a href = \"http://localhost:"
											+ Integer.toString(port) + relative_path +"/" + file.getName() 
											+ "\">" + file.getName() + "</a><br>";
						
								}
							}
							System.out.println(listOfFiles);
							responseString = htmlStart + listOfFiles + htmlEnd;
							System.out.println(responseString);
							contentLength = "Content-Length: " + responseString.length() + "\r\n";
							statusLine = "HTTP/1.1 200 OK" + "\r\n";
							contentTypeLine = "Content-Type: text/html" + "\r\n";
							
							outToClient.writeBytes(statusLine);
							outToClient.writeBytes(serverDetails);
							outToClient.writeBytes(contentTypeLine);
							outToClient.writeBytes(contentLength);
							outToClient.writeBytes("Connection: close\r\n");
							outToClient.writeBytes("\r\n");
							if(httpMethod.equals("GET"))
								outToClient.writeBytes(responseString);
							outToClient.close();
						}
						else
						{
							/*code for handling files*/
							System.out.println("FOUND A FILE!");
							FileInputStream fileStream = new FileInputStream(path);
							contentLength = "Content-Length: " + Integer.toString(fileStream.available()) + "\r\n";
							if (path.endsWith(".html") || path.endsWith(".html"))
							{
								contentTypeLine = "Content-Type: text/html" + "\r\n";
							}
							else if(path.endsWith(".pdf"))
							{
								contentTypeLine = "Content-Type: application/pdf" + "\r\n";
							}
							else if(path.endsWith(".txt"))
							{
								contentTypeLine = "Content-Type: text/plain" + "\r\n";
							}
							else if(path.endsWith(".jpg") || path.endsWith(".jpeg"))
							{
								contentTypeLine = "Content-Type: image/jpeg" + "\r\n";
							}
							else if(path.endsWith(".png"))
							{
								contentTypeLine = "Content-Type: image/png" + "\r\n";
							}
							else if(path.endsWith(".gif"))
							{
								contentTypeLine = "Content-Type: image/gif" + "\r\n";
							}
							else
							{
								contentTypeLine = "Content-Type: application/octet-stream" + "\r\n";
							}
							
							statusLine = "HTTP/1.1 200 OK" + "\r\n";
							outToClient.writeBytes(statusLine);
							outToClient.writeBytes(serverDetails);
							outToClient.writeBytes(contentTypeLine);
							outToClient.writeBytes(contentLength);
							outToClient.writeBytes("Connection: close\r\n");
							outToClient.writeBytes("\r\n");
							if(httpMethod.equals("GET"))
							{
								byte[] buffer = new byte[1024] ;
								int bytesRead;
								
								while ((bytesRead = fileStream.read(buffer)) != -1 )
								{
									outToClient.write(buffer, 0, bytesRead);
								}
								fileStream.close();
							}
							outToClient.close();
						}
					}

				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			 boolean parentCheck(File maybeChild, File possibleParent) throws IOException
			 {
			     final File parent = possibleParent.getCanonicalFile();
			     if (!parent.exists() || !parent.isDirectory()) {
			         // this cannot possibly be the parent
			         return false;
			     }

			     File child = maybeChild.getCanonicalFile();
			     while (child != null) {
			         if (child.equals(parent)) {
			             return true;
			         }
			         child = child.getParentFile();
			     }
			     // No match found, and we've hit the root directory
			     return false;
			 }			
		}
}